<?php
//
//  Copyright (c) 2009-2010, LoveMachine Inc.
//  All Rights Reserved. 
//  http://www.lovemachineinc.com
//

ini_set('error_reporting', E_ALL);
error_reporting(E_ALL);
ini_set('log_errors',TRUE);
ini_set('html_errors',FALSE);
if (!empty($_SERVER['HTTP-X-FORWARDED-FOR'])) { $remote_host=$_SERVER['HTTP-X-FORWARDED-FOR']; } else { $remote_host = $_SERVER['REMOTE_ADDR']; }
if (function_exists('apache_note')) {
        apache_note('sessionid',array_key_exists('PHPSESSID',$_COOKIE)?$_COOKIE['PHPSESSID'].'-'.$remote_host:'empty-'.$remote_host);
}

// Default sender and sms sender. config.php has automatic fallback for REPLYTO if not set (will use *_SENDER)
define('DEFAULT_SENDER', 'worklist@worklist.net');
//define('DEFAULT_REPLYTO', 'worklist@worklist.net');
define('SMS_SENDER', 'worklist@worklist.net');
//define('SMS_REPLYTO', 'worklist@worklist.net');

if(!array_key_exists('HTTPS',$_SERVER) || $_SERVER['HTTPS'] != 'on') {
   header('HTTP/1.1 301 Moved Permanently');
   header('Location: https://' . $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI']);
   exit();
}

//// These are the items most likely in need of being changed.
//Override developer error logs, keep them in the sandbox so they get cleaned up after the task is done
//ini_set('error_log', dirname(__FILE__) . '/php.errors');

//// Use ONE of the following
//define('SANDBOX_USER', '~username/');
define('SANDBOX_USER', '');

//Sandbox URL
//define('SANDBOX_NAME', 'worklist_12345/');
define('SANDBOX_NAME', 'worklist/');

define('APP_LOCATION', SANDBOX_USER . SANDBOX_NAME);

define("APP_NAME","Worklist");

/*  budget authorized users
    Only Ryan, Philip & Fred can add projects! In order to work on the add projects page in your sb,
    your userid must be included below. Just remove when done! Must have trailing comma!
    Adding alexi and jeskad - alexi 2011-10-26
*/
if (!defined('BUDGET_AUTHORIZED_USERS')) define('BUDGET_AUTHORIZED_USERS', ",1,2,1020,1918,2186,1935,");

//Default configuration for sandbox testing
define('SANDBOX_SERVER_API', 'https://dev.worklist.net/sandbox/update.php');
define('SANDBOX_SERVER_API_KEY', 'simulation');
define('SANDBOX_CREATION_EMAIL_TEMPATE', './sb-developer-mail.inc');
define('PROJECT_CHECKOUT_EMAIL_TEMPATE', './sb-checkout-mail.inc');

//define('COMMAND_API_KEY','notdefined');
//define('COMMAND_UPDATE','notdefined');


/** File uploads / S3 settings **/
defineOnce('S3_ACCESS_KEY', 'AKIAIXRYPAC4HCOWBXMQ');
defineOnce('S3_SECRET_KEY', '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');
defineOnce('S3_BUCKET',     'worklist-dev');
defineOnce('S3_URL_BASE',   'https://'.S3_BUCKET.'.s3.amazonaws.com/');

//////////////Shouldn't need to change anything below here////////////////

// Where is the Database?
define('DB_SERVER', 'mysql.dev.sendlove.us');
define('DB_USER', 'dev_worklist');
define('DB_PASSWORD', 'unsecure');
define('DB_NAME', 'dev_worklist');

// Change this to something private in production to deter funny business
define('SALT', 'WORKLIST');

// Refresh interval for ajax updates of the history table (in seconds)
define('AJAX_REFRESH', 30);

define('VIRUS_SCAN_CMD', '/usr/bin/clamscan');

// Default sender and sms sender. config.php has automatic fallback for REPLYTO if not set (will use *_SENDER)
define('DEFAULT_SENDER', 'worklist@worklist.net');
//define('DEFAULT_REPLYTO', 'worklist@worklist.net');
define('SMS_SENDER', 'worklist@worklist.net');
//define('SMS_REPLYTO', 'worklist@worklist.net');

//Server URL's - If running as http://host.domain.com/ (not using app location), defining SERVER_NAME is all that is needed for non-ssl sites
define('SERVER_NAME', 'dev.worklist.net');
define('SERVER_URL', 'https://' . SERVER_NAME . '/' . APP_LOCATION); //Include [:port] for standard http traffic if not :80
define('SECURE_SERVER_URL', SERVER_URL); //Domain is now secure by default

//Override Worklist_url for sandboxes
if (!defined('WORKLIST_URL'))   define('WORKLIST_URL', SECURE_SERVER_URL);
if (!defined("WORKLIST_API_USER"))   define("WORKLIST_API_USER", "api_work@dev.sendlove.us");
if (!defined("WORKLIST_API_PWD"))   define("WORKLIST_API_PWD", "journalpwd");

//Override Path_Info for sandboxes
if (!empty($_SERVER['PATH_INFO'])) {  header( 'Location: ' . WORKLIST_URL . '/worklist.php'); }


//define('APP_NAME','Worklist');
define('API_KEY','worklist_dev_worklist_unsecure');

define('JOURNAL_API_URL', 'https://' . SERVER_NAME . SANDBOX_USER . SANDBOX_NAME . 'add.php');
define('JOURNAL_API_USER', 'api_work@dev.sendlove.us');
define('JOURNAL_API_PWD', 'journalpwd');
define('JOURNAL_API_KEY', 'worklist_dev_journal_unsecure');
define('JOURNAL_QUERY_URL', 'https://' . SERVER_NAME . SANDBOX_USER . SANDBOX_NAME . 'api.php');
define('JOURNAL_QUERY_URL_SSL', 'https://' . SERVER_NAME . SANDBOX_USER . SANDBOX_NAME . 'api.php');

define('JOURNAL_URL', 'https://' . SERVER_NAME . SANDBOX_USER . SANDBOX_NAME . 'journal.php');


if (!defined("SENDLOVE_API_URL")) define("SENDLOVE_API_URL", "https://dev.sendlove.us/love/api.php");
if (!defined("SENDLOVE_API_KEY")) define("SENDLOVE_API_KEY", "uierbycur4yt73467t6trtycff3rt");


//define('SMS_INI_FILE', '/etc/love/worklist/sms.ini');

define('TWITTER_USER', 'user');
define('TWITTER_PASS', 'pass');
define('TWITTER_2_USER', null);
define('TWITTER_2_PASS', null);

/*
* Twitter OAuth constants
*/

define('TWITTER_CONSUMER_KEY', 'consumer_key');
define('TWITTER_CONSUMER_SECRET', 'consumer_secret');
define('TWITTER_OAUTH_TOKEN', 'oauth_token');
define('TWITTER_OAUTH_SECRET', 'oauth_secret');



////How to use a local gateway
define('GOOGLE_HOST', 'localhost');
define('GOOGLE_USER', '');
define('GOOGLE_PWD', '');
define('GOOGLE_PORT', '25');
define('GOOGLE_AUTH', false);

////How to use a secure gateway
//define('GOOGLE_HOST', 'ssl://smtp.gmail.com');
//define('GOOGLE_USER', 'google@gmail.com');
//define('GOOGLE_PWD', 'password');
//define('GOOGLE_PORT', '465');
//define('GOOGLE_AUTH', true);

////How to use a non secure gateway
//define('GOOGLE_HOST', 'fast.critsend.com');
//define('GOOGLE_LOWHOST', 'aws-smtp.critsend.com');
//define('GOOGLE_USER', 'username');
//define('GOOGLE_PWD', 'password');
//define('GOOGLE_PORT', 587);
//define('GOOGLE_AUTH', 'login');

//Example added for SSL+Authentication for authsmtp user
//Example added for SSL+Authentication for gmail.com user
//Example added for nonSSL Authentication for securedomain.com
//Example added for SSL+Authentication for out of band (test) gmail.com user
$mail_auth = array (
  'localhost' => array (
    'host' => 'localhost',
    'auth' => false
    ),
  'authsmtp' => array (
    'host' => 'mail.authsmtp.com',
    'port' => 2525,
    'username' => 'authsmtpuser',
    'password' => 'authsmtppassword',
    'auth' => true
    ),
  'securedomain' => array (
    'host' => 'smtp.gmail.com',
    'username' => 'user@gmail.com',
    'password' => 'password',
    'auth' => true
    ),
  'gmail-ssl' => array (
    'host' => GOOGLE_HOST,
    'port' => GOOGLE_PORT,
    'username' => GOOGLE_USER,
    'password' => GOOGLE_PWD,
    'auth' => GOOGLE_AUTH
    ),
  'gmail-ssl-smsuser' => array (
    'host' => GOOGLE_HOST,
    'port' => GOOGLE_PORT,
    'username' => GOOGLE_USER,
    'password' => GOOGLE_PWD,
    'auth' => GOOGLE_AUTH
    ),
  'gmail-test' => array (
    'host' => 'ssl://smtp.gmail.com',
    'port' => '465',
    'username' => 'user@gmail.com',
    'password' => 'password',
    'auth' => true
    )
  );
    
//Define email From username and display names for sent messages (for example, only registered emails are permitted to send through some gateways)
//This should degrade to the first array if the specific name does not exist. you could just pass a live array or set $headers['From'] before calling.
//In most cases this simply requires changing $header('Content-Type: ....') to $header['Content-Type'] and making sure the header builder creates the plaintext version correctly. (to degrade to php mail() if PEAR:Mail not available)
//error_log("using server.local.php mail_auth");
$mail_user = array (
  'authuser' => array (
    'from' => 'Worklist <worklist@worklist.net>',
    'replyto' => 'Worklist <worklist@worklist.net>',
    ),
  'smsuser' => array (
    'from' =>  'Worklist SMSReply <sms@worklist.net>',
    'replyto' => 'Worklist SMSReply <sms@worklist.net>'
    )
  ); 

